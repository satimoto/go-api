type ListLocation {
    uid: String!
    name: String!
    countryCode: String
    partyId: String
    geom: Geometry! 
    availableEvses: Int!
    totalEvses: Int!
    isRemoteCapable: Boolean!
    isRfidCapable: Boolean!
    addedDate: String!
}

type Location {
    id: ID!
    uid: String!
    type: String!
    name: String
    address: String!
    city: String!
    postalCode: String!
    country: String!
    geom: Geometry!
    relatedLocations: [AddtionalGeoLocation!]!
    evses: [Evse!]!
    availableEvses: Int!
    totalEvses: Int!
    isRemoteCapable: Boolean!
    isRfidCapable: Boolean!
    directions: [DisplayText!]!
    operator: BusinessDetail
    suboperator: BusinessDetail
    owner: BusinessDetail
    facilities: [TextDescription!]!
    timeZone: String
    openingTime: OpeningTime
    chargingWhenClosed: Boolean!
    images: [Image!]!
    energyMix: EnergyMix
    lastUpdated: String!
}

input GetLocationInput {
    id: ID
    uid: String
}

input ListLocationsInput {
    country: String
    interval: Int
    limit: Int
    xMin: Float
    xMax: Float
    yMin: Float
    yMax: Float
}

input PublishLocationInput {
    id: ID
    credentialId: ID
    countryCode: String
    partyId: String
    publish: Boolean!
}

extend type Query {
    getLocation(input: GetLocationInput!): Location
    listLocations(input: ListLocationsInput!): [ListLocation!]!
}

extend type Mutation {
    publishLocation(input: PublishLocationInput!): ResultOk!
}

scalar Geometry